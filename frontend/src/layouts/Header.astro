---
import type { HeaderI18n } from "@/types/types";
import Hamburger from "@/components/Hamburger.astro";
import Traductor from "@/components/Traductor.astro";
import Theme from "@/components/Theme.astro";
import Identification from "@/components/Identification.astro";

// Obtener las traduccciones
const data = Astro.props.data as HeaderI18n;
const { lang } = Astro.params;
const theme = Astro.cookies.get("theme")?.value ?? "light";
---

<header
  class="font-semibold fixed top-0 left-0 w-full z-50 h-20 bg-background flex items-center justify-between px-5 md:px-10"
>
  <Identification data={data.identification.modal} />
  <Hamburger data={data} />
  {
    (
      <img
        src={theme === "dark" ? "/img/logo_amanah_dark.webp" : "/img/logo_amanah.webp"}
        alt=""
        class="h-full hidden lg:block"
        id="logo_amanah"
      />
    )
  }
  <nav class="hidden lg:block absolute left-1/2 top-8 h-full flex items-center z-10 -translate-x-1/2">
    <ul class="flex flex-row gap-6 items-center color-red text-red font-jomolhari justify-center whitespace-nowrap">
      <li><a href={!lang ? "/" : `/${lang}/`}>{data.about_us}</a></li>
      <li><a href={!lang ? "/articles" : `/${lang}/articles`}>{data.articles}</a></li>
      <li><a href={!lang ? "/pricing" : `/${lang}/pricing`}>{data.pricing}</a></li>
      <li><a href={!lang ? "/courses" : `/${lang}/courses`}>{data.courses}</a></li>
      <li><a href={!lang ? "/comments" : `/${lang}/comments`}>{data.comments}</a></li>
      <li><a href={!lang ? "/contact" : `/${lang}/contact`}>{data.contact}</a></li>
    </ul>
  </nav>
  <div class="flex z-10">
    <button
      id="identification"
      class="bg-lightRed hover:bg-salmon transition-colors rounded-lg text-gray-50 font-semibold py-2 mr-3 shadow-lg hover:shadow-xl transition-all duration-200 text-xs px-3 hidden lg:block"
      data-header={JSON.stringify(data.identification)}
    >
      {data.identification.button.login}
    </button>
    <Theme />
    <Traductor />
  </div>
</header>

<script>
  import { auth } from "@/config/firebase.js";
  import { getRedirectResult, onAuthStateChanged } from "firebase/auth";
  import { setupAuth } from "@/services/firebase";
  import { ApiService } from "@/services/helper";
  import type { Result } from "@/types/bakend-types";
  import toast from "solid-toast";

  // Referencias al modal de login y register
  const authModalLogin = document.getElementById("authModalLogin") as HTMLDialogElement;
  const formLogin = authModalLogin.querySelector("form") as HTMLFormElement;
  const btnIdentification = document.getElementById("identification") as HTMLButtonElement;
  const headerData = JSON.parse(btnIdentification.dataset.header || "");

  // Actualizamos segun el tamaño de la ventana
  document.addEventListener("DOMContentLoaded", async () => {
    try {
      // Verificar si hay resultado de redirect - SOLO para activar onAuthStateChanged
      console.log("🔍 Checking for redirect result...");
      const result = await getRedirectResult(auth);

      if (result) {
        console.log("✅ Usuario autenticado desde redirect:", result.user.email);
        toast.success("¡Bienvenido de vuelta!");
        // onAuthStateChanged se disparará automáticamente
      }
    } catch (error) {
      console.error("Error handling redirect:", error);
    }
    window.addEventListener("resize", () => {
      setupAuth(auth.currentUser, authModalLogin, formLogin, headerData);
    });
  });

  // Firebase auth state
  onAuthStateChanged(auth, async (user) => {
    setupAuth(user, authModalLogin, formLogin, headerData);

    if (user) {
      const helper = new ApiService();
      const idToken = await user.getIdToken();
      helper.createSession(idToken);
    }
  });
</script>
