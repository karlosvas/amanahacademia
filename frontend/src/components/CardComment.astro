---
// filepath: c:\Users\carlo\Desktop\.main\repos\amanahacademia\frontend\src\components\CardComment.astro
import type { Comment } from "@/types/types";
import PersonIcon from "@/assets/person.svg";
import StarGroup from "./StarGroup.astro";
import Like from "@/assets/like.svg";

const comment = Astro.props.data as Comment;
if (!comment) return;
---

<div class="bg-lightSalmon max-w-96 m-3 p-2 rounded-md scroll-fade-in min-w-80">
  <div class="p-5">
    <div class="flex items-center space-x-3 mb-2">
      {
        comment.user_picture ? (
          <img src={comment.user_picture} alt="User Icon" class="w-7 h-7 rounded-full" />
        ) : (
          <PersonIcon class="w-7 h-7" />
        )
      }
      <div>
        <p class="text-xs">@{comment.name}</p>
        <StarGroup star={comment.stars} size={"16px"} />
      </div>
    </div>
    <p class="text-xs">{comment.fecha}</p>
  </div>
  <p class="pl-5">
    {comment.content}
  </p>
  <div class="flex justify-end space-x-2">
    <!-- Like principal - se inicializa en client-side -->
    <div
      class="flex justify-end space-x-1 cursor-pointer like-icon"
      data-id={comment.author_uid}
      data-users-liked={comment.users_liked ? JSON.stringify(comment.users_liked) : "[]"}
    >
      <Like class="like-svg" />
      <span class="min-w-5 text-center">{comment.like > 0 ? comment.like : 0}</span>
    </div>
  </div>
</div>

<script>
  import { getAuth } from "firebase/auth";
  import { ApiService } from "@/services/helper";
  import type { SessionData, Result } from "@/types/bakend-types";

  export function waitForFirebaseAuth(): Promise<User | null> {
    const auth = getAuth();

    return new Promise((resolve) => {
      // Si Firebase ya está inicializado
      if (auth.currentUser !== undefined) {
        resolve(auth.currentUser);
      } else {
        // Esperar a que Firebase se inicialice
        const unsubscribe = auth.onAuthStateChanged((user) => {
          unsubscribe();
          resolve(user);
        });
      }
    });
  }

  // Client-side: Manejar la lógica de autenticación y likes
  document.addEventListener("DOMContentLoaded", async function () {
    const likeIcons = document.querySelectorAll(".like-icon");

    likeIcons.forEach(async (likeIcon) => {
      const element = likeIcon as HTMLElement;
      const usersLikedData = element.getAttribute("data-users-liked");
      const usersLiked: string[] = usersLikedData ? JSON.parse(usersLikedData) : [];

      try {
        // ✅ Esperar a que Firebase esté listo
        const currentUser = await waitForFirebaseAuth();

        if (currentUser) {
          // Usuario autenticado - verificar sesión
          const helper = new ApiService();
          const sessionData: Result<SessionData> | null = await helper.getSession();

          if (sessionData?.success && sessionData.data) {
            const currentUserId = sessionData.data.local_id;
            const isLiked = usersLiked.includes(currentUserId);

            if (isLiked) {
              element.classList.add("liked");
              const svg = element.querySelector(".like-svg");
              if (svg) svg.classList.add("liked");
            }

            console.log({ currentUserId, isLiked, usersLiked });
          }
        } else {
          console.log("User not authenticated - likes disabled");
        }
      } catch (error) {
        console.error("Error initializing like state:", error);
      }
    });
  });
</script>

<style>
  .like-svg {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    color: #6b7280;
    fill: #cbcbcb;
  }

  .like-icon.liked .like-svg,
  .like-svg.liked {
    color: var(--color-red);
    fill: var(--color-light-red);
    animation: likeAnimation 0.6s ease-in-out;
  }

  .like-svg:hover {
    color: var(--color-red);
    transform: scale(1.1);
  }

  @keyframes likeAnimation {
    0% {
      transform: scale(1);
    }
    15% {
      transform: scale(1.2);
    }
    30% {
      transform: scale(0.95);
    }
    45% {
      transform: scale(1.1);
    }
    60% {
      transform: scale(0.98);
    }
    100% {
      transform: scale(1);
    }
  }

  .like-svg.pulse {
    animation: pulseEffect 0.3s ease-out;
  }

  @keyframes pulseEffect {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.3);
    }
    100% {
      transform: scale(1);
    }
  }
</style>
