---
import CardComment from "@/components/comments/CardComment.astro";
import StarGroup from "@/components/comments/StarGroup.astro";
import Stadistics from "@/components/comments/Stadistics.astro";
import type { Comment, Result } from "@/types/bakend-types";
import { ApiService } from "@/services/helper";
import CommentModal from "@/components/comments/CommentModal.astro";
import { processComments } from "@/services/comments";
import type { CommentI18n } from "@/types/types";

const data = Astro.props.data as CommentI18n;

const helper = new ApiService();
let comments: Comment[] = [];
let bestComments: Comment[] = [];
let mediaStars: number = 0.0;
try {
  const response: Result<Comment[]> = await helper.getAllComments();
  if (response.success) {
    const commentsData = Object.entries(response.data).map(([key, value]) => ({
      id: key,
      author_uid: value.author_uid ?? "",
      name: value.name ?? "",
      timestamp: value.timestamp ?? "",
      content: value.content ?? "",
      url_img: value.url_img ?? "",
      stars: value.stars ?? 0,
      like: value.like ?? 0,
      reply: value.reply ?? [],
      users_liked: value.users_liked ?? [],
    }));

    ({ comments, bestComments } = processComments(commentsData));
    mediaStars = comments.reduce((acc, comment) => acc + (comment.stars ?? 0), 0) / comments.length;
    // Ordenamos por timestamp
  } else {
    console.error("Error al cargar comentarios:", response.error);
    // En server-side no puedes usar toast, pero puedes hacer logging
  }
} catch (error) {
  console.error("Error de red al cargar comentarios:", error);
  // Opcional: Puedes tener comentarios por defecto o vacío
  comments = [];
}

const percentaje = ["90", "70", "95", "80", "89"];
---

<main
  class="py-6 sm:py-8 md:py-10 lg:mt-0 mb-12 sm:mb-16 md:mb-20 m-auto w-full 2xl:w-3/4
              grid grid-cols-1 lg:grid-cols-3
              gap-4 sm:gap-6 lg:gap-8 items-start justify-items-center px-2 sm:px-4 comments-grid scroll-fade-in"
>
  <!-- Sección 1: Estadísticas y comentarios destacados -->
  <div class="w-full max-w-sm mx-auto justify-self-center md:justify-self-center lg:justify-self-start section-1">
    <div class="text-center mb-4 sm:mb-6">
      <p class="text-5xl sm:text-6xl lg:text-7xl font-bold text-gray-800 font-sans">{mediaStars.toFixed(2)}</p>
      <StarGroup star={mediaStars | 1} size={50} />
    </div>
    <h5 class="text-salmon ml-2 sm:ml-3 mb-10 sm:mb-4 font-semibold text-sm sm:text-base">
      {data.best}
    </h5>
    <div class="space-y-3 sm:space-y-4">
      {
        bestComments.length > 0 &&
          bestComments.map((comment: Comment) => {
            return <CardComment comment={comment} id={"best-" + comment.id} data={data.modal} />;
          })
      }
    </div>
  </div>

  <!-- Sección 2: Botón comentar y más comentarios -->
  <div
    class="max-w-sm sm:max-w-2xl mt-24 w-full lg:col-span-1 lg:max-w-sm flex flex-col items-center justify-self-center lg:justify-self-auto order-2 lg:order-2 section-2"
  >
    <button
      id="open-comment-modal"
      class="bg-lightRed hover:bg-salmon
           rounded-lg text-gray-100 text-lg sm:text-xl font-semibold w-full max-w-48 sm:max-w-56
           py-2 sm:py-3 px-4 sm:px-6 shadow-lg hover:shadow-xl transform
            sm:mb-6 mt-6 sm:mt-8 lg:mt-0"
    >
      {data.button}
    </button>
    <div
      class="w-full grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-1 gap-3 sm:gap-4 lg:gap-6 justify-items-center mt-10"
    >
      {
        comments.length > 0 &&
          comments.map((comment: Comment) => <CardComment comment={comment} id={comment.id} data={data.modal} />)
      }
    </div>
  </div>

  <!-- Sección 3: Elementos de evaluación -->
  <div
    class="bg-lightSalmon mt-12 sm:mt-16 lg:mt-20 rounded-lg max-w-sm w-full overflow-hidden mx-auto md:mx-auto lg:mx-0 order-3 section-3"
  >
    <!-- Header -->
    <div class="px-3 sm:px-4 py-2 sm:py-3 bg-salmon">
      <h5 class="text-xs sm:text-sm font-semibold">{data.evaluations.title}</h5>
    </div>

    <!-- Contenido -->
    <div class="p-3 sm:p-4 space-y-8 sm:space-y-10 lg:space-y-14 pb-6 sm:pb-8 lg:pb-10">
      {data.evaluations.types.map((element, i) => <Stadistics title={element} percentage={percentaje[i] ?? "100"} />)}
    </div>
  </div>
  <CommentModal id={"comment-modal"} edit={false} data={data.modal} />
</main>
<script>
  // Importa la instancia de autenticación de Firebase y el listener de cambios de usuario
  import { onAuthStateChanged, getFirebaseAuth } from "@/services/firebase";
  import { submitLike } from "@/services/comments";
  import { toast } from "solid-toast";
  import { updateLikeState } from "@/services/comments";
  import { showModalAnimation } from "@/utils/modals";
  import { FrontendErrorCode, getErrorToast } from "@/enums/enums";

  // Espera a que el DOM esté completamente cargado
  document.addEventListener("DOMContentLoaded", async function () {
    // Obtiene la instancia de autenticación de Firebase
    const { getFirebaseAuth } = await import("@/services/firebase");
    const auth = await getFirebaseAuth();

    // Selecciona todos los comentarios en la página
    const likeIcons = document.querySelectorAll(".like-icon");

    // Itera sobre cada comentario
    likeIcons.forEach(async (likeIcon) => {
      // Selecciona el icono de "like" dentro del comentario
      // Selecciona el span que muestra el número de likes
      const likeCountSpan = likeIcon.querySelector("span");
      if (!likeCountSpan) return;

      // Obtiene los datos del comentario desde el atributo data-users-liked
      const commentAttr = likeIcon.getAttribute("data-users-liked");
      if (!commentAttr) return;
      const comment = JSON.parse(commentAttr);

      // Escucha los cambios de autenticación y actualiza el estado visual del like
      onAuthStateChanged((user) => {
        updateLikeState(user, likeIcon, comment);
      });

      // Añade el listener al icono de "like" para manejar el click
      likeIcon.addEventListener("click", async () => {
        const user = auth.currentUser;
        if (user) {
          // Selecciona el SVG del icono de "like"
          const svg = likeIcon.querySelector(".like-svg");

          // Cambia el estado visual inmediatamente (toggle)
          likeIcon.classList.toggle("liked");
          if (svg) svg.classList.toggle("liked");
          if (svg) svg.classList.add("pulse");

          // Llama a la función que registra el like en el backend
          try {
            await submitLike(likeIcon, likeCountSpan);
          } catch (err) {
            console.error("Error in submitLike:", err);
          }

          // Quita la animación "pulse" después de 300ms
          setTimeout(() => {
            if (svg) svg.classList.remove("pulse");
          }, 300);
        } else {
          // Si el usuario no está logueado, muestra un toast de error
          toast.error(getErrorToast(FrontendErrorCode.NEED_AUTHENTICATION));
        }
      });
    });

    // Para abrir el modal (por ejemplo, desde un botón)
    function openCommentModal(idCommentShared: string, isEdit: boolean = false) {
      const modal = document.getElementById(idCommentShared) as HTMLDialogElement;
      const form = modal?.querySelector("form") as HTMLFormElement;

      if (modal && form) {
        showModalAnimation(modal, form, true); // true para showModal() en lugar de show()
      }
    }

    // Ejemplo de uso desde un botón
    const openBtn = document.getElementById("open-comment-modal");
    openBtn?.addEventListener("click", () => {
      if (!auth.currentUser) {
        toast.error(getErrorToast(FrontendErrorCode.NEED_AUTHENTICATION));
        return;
      }
      openCommentModal("comment-modal"); // donde "123" es tu ID único
    });
  });
</script>
<style>
  @media (min-width: 768px) and (max-width: 1023px) {
    .comments-grid {
      grid-template-columns: 1fr;
    }
    .section-1 {
      grid-column: 1;
      justify-self: center;
      max-width: 400px;
    }
    .section-2 {
      grid-column: 1;
      justify-self: center;
      max-width: 600px;
    }
    .section-3 {
      grid-column: 1;
      justify-self: center;
      max-width: 400px;
    }
  }
</style>
