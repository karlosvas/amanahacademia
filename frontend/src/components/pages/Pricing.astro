---
import { Class } from "@/enums/enums";
import CardPricing from "@/components/pricing/CardPricing.astro";
import Title from "@/components/common/Title.astro";
import type { PricingI18n } from "@/types/types";
import { ApiService } from "@/services/helper";

const data = Astro.props.data as PricingI18n;

let teachers;
try {
  // Fetch teachers from the API
  const helper = new ApiService();
  const response = await helper.getTeachers();

  // Check if the response is successful and has data
  if (response.success && response.data) {
    teachers = Object.values(response.data);
  } else if ("error" in response) console.error("Error fetching teachers:", response.error);
  else console.error("Unknown error fetching teachers");
} catch (e) {
  console.error("Error fetching teachers:", e);
}
---

<main class="relative text-black">
  <style>
    @media (min-width: 768px) and (max-width: 1023px) {
      .grid > :nth-child(3) {
        grid-column: 1 / -1;
        justify-self: center;
        max-width: 50%;
      }
    }
  </style>
  <div class="w-full max-w-7xl xl:w-3/4 m-auto px-2 sm:px-4">
    <Title sizeText="text-2xl" sizeLine="h-1" sizeWidth="w-16">{data.title}</Title>
    <div
      class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 justify-center items-stretch h-auto gap-6 sm:gap-8 md:gap-6 lg:gap-4 w-full max-w-6xl mx-auto px-4 sm:px-6 md:px-8 lg:px-4"
    >
      <CardPricing data={data.type.standard} id={Class.Standard} teachers={teachers} />
      <CardPricing data={data.type.conversation} id={Class.Conversacion} teachers={teachers} />
      <CardPricing data={data.type.group} id={Class.Grupales} teachers={teachers} />
    </div>
    <div
      class="w-full md:w-3/4 flex flex-col md:flex-row text-xs sm:text-sm mt-20 m-auto pb-6 sm:pb-8 md:pb-12 lg:pb-16 xl:pb-20 px-4 sm:px-6 lg:px-12 xl:px-20 md:px-0 gap-4 sm:gap-5 md:gap-6 scroll-fade-in"
    >
      <div class="mx-0 md:mx-3">
        <h4 class="text-salmon text-base sm:text-lg font-semibold">
          {data.info[0].title}
        </h4>
        <p class="mt-2 text-xs sm:text-sm leading-relaxed">
          {data.info[0].description}
        </p>
        <button
          data-cal-namespace="free-class"
          data-cal-link="team/amanah-academia/free-class"
          data-cal-host="1735275"
          class="select-schedule transition-all duration-300 transform hover:scale-[1.02] hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-salmon focus:ring-offset-2 bg-red text-salmon py-2 px-4 sm:px-6 md:px-8 lg:px-10 rounded-full mt-3 sm:mt-4 md:mt-5 text-xs sm:text-sm cal-btn font-semibold w-full sm:w-auto"
        >
          {data.info[0].button}
        </button>
      </div>
      <div class="mx-0 md:mx-3 mb-10 md:mb-20">
        <h4 class="text-salmon text-base sm:text-lg font-semibold">
          {data.info[1].title}
        </h4>
        <p class="mt-2 text-xs sm:text-sm leading-relaxed">
          {data.info[1].description}
        </p>
      </div>
    </div>
  </div>
</main>
<div id="cal-inline-root" class="relative mx-auto"></div>

<script>
  import { closeModalAnimation, showModalAnimation } from "@/utils/modals";
  import { initCalendar } from "@/services/calendar";
  import { Class } from "@/enums/enums";
  import { getThemeFromCookie } from "@/utils/cookie";
  import { updatePricing } from "@/services/calendar";

  // Evento al cargar el DOM
  document.addEventListener("DOMContentLoaded", () => {
    [Class.Free, Class.Conversacion, Class.Grupales, Class.Standard].forEach(initCalendar);

    // Obtenemos todos los botones de reservar clase
    const reserveButtons = document.querySelectorAll(".reserve-class") as NodeListOf<HTMLButtonElement>;
    // Por cada bot칩n obtenemos que modal pertenece, para abrir el que le corresponde al hacer click
    if (!reserveButtons) return;
    reserveButtons.forEach((button) => {
      button.addEventListener("click", () => {
        // Obtenemos el modal correspondiente al bot칩n
        const modalID: string | null = button.getAttribute("card-button");
        if (!modalID) return;
        const modal = document.getElementById(modalID) as HTMLDialogElement | null;

        if (modal && modal.id && Object.values(Class).includes(modal.id as Class))
          showModalAnimation(modal, null, true);
      });
    });

    // Obtenemos todos los enlaces de seleccionar horario, button o img
    const calElements = document.querySelectorAll("[data-cal-link]");

    calElements.forEach((element) => {
      element.addEventListener("click", async () => {
        const modal = document.querySelector("dialog[open]") as HTMLDialogElement | null;
        if (modal) closeModalAnimation(modal);

        // Obtenemos el tema actual
        const theme = getThemeFromCookie();

        // Para cada .select-schedule: COMBINAR tema con precios existentes
        calElements.forEach((el) => {
          // Obtener config existente (que ya tiene precios)
          const existingConfig = el.getAttribute("data-cal-config");
          let calConfig: { [key: string]: any } = {};

          try {
            calConfig = existingConfig ? JSON.parse(existingConfig) : {};
          } catch (e) {
            console.warn("Error parsing existing cal-config:", e);
            calConfig = {};
          }

          // A침adir solo el tema, preservando precios
          calConfig.theme = theme;

          // Actualizar con configuraci칩n completa
          el.setAttribute("data-cal-config", JSON.stringify(calConfig));
        });
      });
    });

    updatePricing();
  });
</script>
