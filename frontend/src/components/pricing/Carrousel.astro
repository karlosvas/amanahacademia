---
import SpainIcon from "@/assets/spain.svg";
import type { Teacher } from "@/types/bakend-types";

const id = Astro.props.id as string;
const teachers = Astro.props.teachers as Teacher[];
---

<section class="max-w-2xl mx-auto py-4 sm:py-6 md:py-8 px-0 md:px-4" aria-label="Carrusel de profesores">
  <div class="relative flex items-center justify-center">
    <button
      type="button"
      class="absolute left-0 sm:left-0 top-1/2 -translate-y-1/2 bg-red text-white rounded-lg sm:rounded-xl w-8 h-8 sm:w-10 sm:h-10 flex items-center justify-center z-10 user-select-none text-sm sm:text-lg md:text-xl transition-all duration-300 ease-out opacity-85 hover:opacity-100 hover:scale-105 hover:shadow-xl hover:shadow-red-500/30 active:scale-95 backdrop-blur-sm border border-white/10"
      id={`carousel-prev-${id}`}
      aria-label="Ver profesor anterior"
    >
      &#8592;
    </button>

    <div
      class="overflow-hidden w-full min-h-[450px] max-h-[600px] flex items-center justify-center relative mx-8 sm:mx-10 md:mx-8 p-1 sm:p-2"
      id={`carousel-track-${id}`}
      role="region"
      aria-live="polite"
    >
      {
        teachers &&
          teachers.map((teacher, i) => (
            <article
              class={` carousel-slide absolute top-1/2 left-1/2 flex flex-col items-center justify-center ${i === 0 ? "active" : ""} w-full h-full max-w-lg`}
              style="transform: translate(-50%, -50%);"
              data-index={i}
              aria-hidden={i !== 0}
            >
              <figure class="flex flex-col items-center text-center">
                <div class="relative group">
                  <div
                    class="absolute -inset-0 bg-salmon rounded-3xl blur opacity-0 group-hover:opacity-40 transition-opacity duration-300"
                    aria-hidden="true"
                  />
                  <img
                    src={teacher.url_image + ".webp"}
                    alt={`Fotografía de ${teacher.name}, profesor nativo de ${teacher.native_lang}`}
                    class="carousel-img relative w-40 h-40 md:w-44 md:h-44 lg:w-48 lg:h-48 rounded-3xl object-cover shadow-xl hover:shadow-2xl hover:shadow-red-500/30 hover:scale-105 transition-all duration-300 ease-out cursor-pointer"
                    data-index={i}
                    data-cal-teacher={teacher.name}
                    data-cal-namespace={id}
                    data-cal-host={teacher.cal_id}
                    data-cal-link={`team/amanah-academia/${id}`}
                    loading="lazy"
                  />
                </div>
                <figcaption class="text-black text-center space-y-1.5 px-2 md:px-3 pt-5">
                  <h3 class="text-lg lg:text-xl font-semibold">{teacher.name}</h3>
                  <div class="bg-opacity-70 bg-lightBrown rounded-xl py-1.5 w-fit px-4 m-auto">
                    <p class="text-xs sm:text-sm flex items-center justify-center">
                      <span class="font-medium pr-2" lang="es">
                        {teacher.native_lang}
                      </span>
                      <SpainIcon height={18} width={18} aria-hidden="true" />
                    </p>
                  </div>
                  <p class="text-xs sm:text-sm leading-snug bg-opacity-70 px-1 md:px-2 rounded-lg max-w-xs sm:max-w-sm mx-auto">
                    {teacher.description}
                  </p>
                </figcaption>
              </figure>
            </article>
          ))
      }
    </div>

    <button
      type="button"
      class="absolute right-0 sm:right-0 top-1/2 -translate-y-1/2 bg-red text-white rounded-lg sm:rounded-xl w-8 h-8 sm:w-10 sm:h-10 flex items-center justify-center z-10 user-select-none text-sm sm:text-lg md:text-xl transition-all duration-300 ease-out opacity-85 hover:opacity-100 hover:scale-105 hover:shadow-xl hover:shadow-red-500/30 active:scale-95 backdrop-blur-sm border border-white/10"
      id={`carousel-next-${id}`}
      aria-label="Ver siguiente profesor"
    >
      &#8594;
    </button>
  </div>

  <!-- Dots de navegación - Solo mostrar si hay más de 1 profesor -->
  {
    teachers.length > 1 && (
      <nav
        class="flex justify-center gap-1 sm:gap-2 mt-3 sm:mt-4"
        id={`carousel-dots-${id}`}
        aria-label="Navegación de profesores"
      >
        {teachers.map((teacher, i) => (
          <button
            type="button"
            class="carousel-dot w-2 h-2 sm:w-3 sm:h-3 rounded-full bg-gray-300 transition-all duration-300 ease-out transform scale-100 hover:scale-110"
            data-index={i}
            aria-label={`Ver perfil de ${teacher.name}`}
            aria-current={i === 0 ? "true" : "false"}
          />
        ))}
      </nav>
    )
  }
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Inicializar todos los carruseles presentes en la página
    const allCarousels = document.querySelectorAll('[id^="carousel-track-"]');
    allCarousels.forEach((carousel) => {
      const carouselId = carousel.id.replace("carousel-track-", "");
      const carrousel = document.getElementById(`carousel-track-${carouselId}`);
      const carrouselDots = document.getElementById(`carousel-dots-${carouselId}`);
      const prevButton = document.getElementById(`carousel-prev-${carouselId}`);
      const nextButton = document.getElementById(`carousel-next-${carouselId}`);

      if (!carrousel || !prevButton || !nextButton) return;

      const slides = Array.from(carrousel.querySelectorAll(".carousel-slide")) as HTMLElement[];
      const dots = carrouselDots ? (Array.from(carrouselDots.querySelectorAll(".carousel-dot")) as HTMLElement[]) : [];
      let current = 0;

      // Ocultar botones si solo hay un profesor
      if (slides.length <= 1) {
        prevButton.style.display = "none";
        nextButton.style.display = "none";
        return;
      }

      function showSlide(idx: number, direction = "right") {
        // Si es el mismo índice, no hacer nada
        if (idx === current) return;

        // Remover clases de animación existentes
        slides.forEach((slide) => {
          slide.classList.remove("active", "exit-right", "exit-left", "enter-right", "enter-left");
        });

        // Aplicar animación de salida al slide actual según la dirección
        if (direction === "right") {
          slides[current].classList.add("exit-left");
        } else {
          slides[current].classList.add("exit-right");
        }

        // Aplicar animación de entrada al nuevo slide según la dirección
        if (direction === "right") {
          slides[idx].classList.add("enter-right");
        } else {
          slides[idx].classList.add("enter-left");
        }

        // Después de la animación, establecer el nuevo slide como activo
        setTimeout(() => {
          slides.forEach((slide, i) => {
            slide.classList.remove("exit-right", "exit-left", "enter-right", "enter-left");
            slide.setAttribute("aria-hidden", i !== idx ? "true" : "false");
          });
          slides[idx].classList.add("active");
          current = idx;

          // Actualizar dots si existen
          dots.forEach((dot, i) => {
            dot.classList.toggle("active", i === idx);
            dot.setAttribute("aria-current", i === idx ? "true" : "false");
            if (i === idx) {
              dot.style.backgroundColor = "#ef4444";
              dot.style.transform = "scale(1.3)";
              dot.style.boxShadow = "0 0 10px rgba(239, 68, 68, 0.5)";
            } else {
              dot.style.backgroundColor = "#d1d5db";
              dot.style.transform = "scale(1)";
              dot.style.boxShadow = "none";
            }
          });
        }, 600); // Duración de la animación
      }

      // Event listeners para navegación
      prevButton.addEventListener("click", () => {
        showSlide((current - 1 + slides.length) % slides.length, "left");
      });

      nextButton.addEventListener("click", () => {
        showSlide((current + 1) % slides.length, "right");
      });

      // Event listeners para dots
      dots.forEach((dot, i) => {
        dot.addEventListener("click", () => {
          const direction = i > current ? "right" : "left";
          showSlide(i, direction);
        });
      });

      // Inicializar con el primer slide activo
      if (slides.length > 0) {
        slides[0].classList.add("active");
        if (dots.length > 0) {
          dots[0].classList.add("active");
          dots[0].style.backgroundColor = "#ef4444";
          dots[0].style.transform = "scale(1.3)";
          dots[0].style.boxShadow = "0 0 10px rgba(239, 68, 68, 0.5)";
        }
      }
    });
  });
</script>

<style>
  @keyframes slideInFromRight {
    from {
      opacity: 0;
      transform: translate(50%, -50%) scale(0.85) rotateY(-15deg);
    }
    to {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1) rotateY(0);
    }
  }

  @keyframes slideInFromLeft {
    from {
      opacity: 0;
      transform: translate(-150%, -50%) scale(0.85) rotateY(15deg);
    }
    to {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1) rotateY(0);
    }
  }

  @keyframes slideOutToLeft {
    from {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1) rotateY(0);
    }
    to {
      opacity: 0;
      transform: translate(-150%, -50%) scale(0.85) rotateY(15deg);
    }
  }

  @keyframes slideOutToRight {
    from {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1) rotateY(0);
    }
    to {
      opacity: 0;
      transform: translate(50%, -50%) scale(0.85) rotateY(-15deg);
    }
  }

  .carousel-slide {
    opacity: 0;
    z-index: 0;
    pointer-events: none;
    transform: scale(0.85);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .carousel-slide.active {
    opacity: 1;
    z-index: 30;
    pointer-events: auto;
    transform: scale(1);
  }

  .carousel-slide.exit-right {
    animation: slideOutToRight 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    z-index: 20;
  }

  .carousel-slide.exit-left {
    animation: slideOutToLeft 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    z-index: 20;
  }

  .carousel-slide.enter-right {
    animation: slideInFromRight 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    z-index: 30;
  }

  .carousel-slide.enter-left {
    animation: slideInFromLeft 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    z-index: 30;
  }

  .carousel-img {
    filter: brightness(0.85) saturate(1.1);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .carousel-slide.active .carousel-img {
    filter: brightness(1) saturate(1);
  }

  .carousel-dot {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .carousel-dot:hover {
    transform: scale(1.15) !important;
    background-color: #f87171 !important;
  }
</style>
