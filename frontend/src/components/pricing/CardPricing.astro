---
// CardPricing.astro
import IconCheck from "@/assets/check.svg";
import ModalPracing from "./ModalPracing.astro";
import type { CardPricingType } from "@/types/types";
import type { Class } from "@/enums/enums";

const data = Astro.props.data as CardPricingType;
const id = Astro.props.id as Class;
---

<div
  class="scroll-fade-in w-3/4 m-auto md:max-w-72 min-h-[500px] relative text-center text-black bg-smoothBrown rounded-xl py-10 px-5 flex flex-col md:m-0 h-full containter-pricing"
  data-pricing-tier={id}
>
  <h2 class="font-semibold text-red px-5">{data.title}</h2>
  <div class="flex-1 flex flex-col items-center">
    <ul class="text-start text-xs mb-5 flex-1 flex flex-col items-start justify-center">
      {
        (data.content ?? []).map((item: string) => (
          <li class="flex my-2 gap-x-2">
            <IconCheck style="width:15px; height:15px; min-width:15px; min-height:15px; max-width:15px; max-height:15px;" />
            {item}
          </li>
        ))
      }
    </ul>
    <div class="font-semibold text-red mb-5 text-lg flex justify-center items-center gap-x-1">
      <div class="price-container">
        <span class="price-amount">{data.price?.amount || 30}</span>
        <span class="currency-symbol">€</span>
      </div>
      <span class="text-xs">{data.price?.time || ""}</span>
    </div>
  </div>
  <button
    data-modal-id={id}
    class="reserve-class bg-gradient-to-r from-salmon to-brown hover:from-lightRed hover:to-red rounded-md py-3 px-5 xl:px-10 text-white font-semibold mt-auto transition-all duration-300 transform hover:scale-[1.02] hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-salmon focus:ring-offset-2"
  >
    {data.button}
  </button>
</div>
<ModalPracing id={id} />

<script>
  async function updatePricing() {
    try {
      // Obtener el país de la URL si existe
      const urlParams = new URLSearchParams(window.location.search);
      const testCountry = urlParams.get("test_country");

      const apiUrl = testCountry ? `/api/pricing?test_country=${testCountry}` : "/api/pricing";
      const response = await fetch(apiUrl);

      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

      const pricingData = await response.json();
      document.querySelectorAll("[data-pricing-tier]").forEach((card) => {
        const tier = card.getAttribute("data-pricing-tier");
        const symbolElement = card.querySelector(".currency-symbol");
        const amountElement = card.querySelectorAll(".price-amount");
        const perStudentElement = card.querySelector(".per-student-price");

        let tierPrice,
          perStudentPrice = null;

        switch (tier) {
          case "standard":
            tierPrice = pricingData.prices.individual_standard;
            break;
          case "conversation":
            tierPrice = pricingData.prices.individual_conversation;
            break;
          case "group":
            tierPrice = pricingData.prices.group;
            break;
          default:
            tierPrice = pricingData.prices.individual_standard;
        }

        if (symbolElement) symbolElement.textContent = pricingData.symbol;
        if (amountElement) amountElement.forEach((el) => (el.textContent = tierPrice.toString()));

        // Mostrar precio por estudiante si aplica
        if (perStudentElement && perStudentPrice) {
          perStudentElement.textContent = perStudentPrice;
          perStudentElement.classList.remove("hidden");
        }
      });
    } catch (error) {
      console.error("❌ Error loading pricing:", error);
    }
  }

  // Ejecutar cuando el DOM esté listo
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", updatePricing);
  } else {
    updatePricing();
  }
</script>
