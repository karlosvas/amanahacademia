---
import Title from "../common/Title.astro";
---

<div id="app-config" class="container h-screen">
  <div class="card">
    <Title sizeText="text-lg" sizeLine="h-1" sizeWidth="w-20">
      Finaliza tu inscripción<span class="ml-2" id="pricing"></span>
    </Title>

    <!-- Mensajes de estado -->
    <div id="success-message" class="message success"></div>
    <div id="error-message" class="message error-message"></div>

    <!-- Contenedor para los elementos de pago -->
    <div id="payment-element-container">
      <div class="loading">Inicializando pasarela de pago...</div>
      <div id="payment-element"></div>
    </div>

    <button id="submit-button" type="button" disabled>
      <span id="button-text">Pagar ahora</span>
    </button>
  </div>
</div>

<script src="https://js.stripe.com/v3/"></script>
<script>
  import { showError, handlePayment } from "@/services/payment";
  import { initializePrice, initializeStripe } from "@/services/payment";
  import { getErrorFrontStripe, FrontendStripe } from "@/enums/enums";

  // Obtenemos la configuracion inicial
  const STRIPE_PUBLIC_KEY = import.meta.env.PUBLIC_STRIPE_API_KEY;
  const URL_BACKEND = import.meta.env.PUBLIC_BACKEND_URL;

  if (!STRIPE_PUBLIC_KEY || !URL_BACKEND) {
    showError(getErrorFrontStripe(FrontendStripe.MISSING_CONFIG));
    throw new Error("Missing Stripe configuration");
  }

  let stripe: any;
  let elements: any;
  let paymentElement: any;
  const params = new URLSearchParams(window.location.search);
  const slugType: string | null = params.get("type");
  const bookingUid: string | null = params.get("uid");
  const testCountry: string | null = params.get("test_country");

  if (!slugType || !bookingUid || !testCountry) {
    showError(getErrorFrontStripe(FrontendStripe.MISSING_URL_PARAMS));
    throw new Error("Missing URL parameters");
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener("DOMContentLoaded", async () => {
    try {
      // Esperamos a que cargue firebase antes de inicializar Stripe
      setTimeout(async () => {
        const price = await initializePrice(testCountry, slugType);
        await initializeStripe(paymentElement, stripe, STRIPE_PUBLIC_KEY, elements, price);

        const submitButton = document.getElementById("submit-button");
        if (!submitButton) return;
        submitButton.addEventListener("click", () => handlePayment(stripe, elements, bookingUid));
      }, 1000);
    } catch (e) {
      console.error(e);
    }
  });
</script>

<style>
  .container {
    max-width: 600px;
    margin: 50px auto;
    padding: 20px;
    font-family: Arial, sans-serif;
  }

  .card {
    border-radius: 8px;
    padding: 30px;
  }

  h1 {
    text-align: center;
    color: #333;
    margin-bottom: 30px;
  }

  .message {
    padding: 12px;
    border-radius: 4px;
    margin-bottom: 20px;
    display: none;
  }

  .success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  .error-message {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }

  #payment-element {
    margin: 20px 0;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    min-height: 40px;
  }

  .loading {
    text-align: center;
    color: #666;
    padding: 20px;
  }

  #submit-button {
    width: 100%;
    background-color: var(--color-salmon);
    color: white;
    border: none;
    padding: 12px 20px;
    border-radius: 4px;
    font-size: 16px;
    cursor: pointer;
    margin-top: 20px;
  }

  #submit-button:disabled {
    background-color: #aaa;
    cursor: not-allowed;
  }

  #submit-button:hover:not(:disabled) {
    background-color: var(--color-light-brown);
  }
</style>
