---
import Title from "../common/Title.astro";
---

<div id="app-config" class="container h-screen">
  <div class="card">
    <Title sizeText="text-lg" sizeLine="h-1" sizeWidth="w-20">
      Finaliza tu inscripción<span class="ml-2" id="pricing"></span>
    </Title>

    <!-- Mensajes de estado -->
    <div id="success-message" class="message success"></div>
    <div id="error-message" class="message error-message"></div>

    <!-- Contenedor para los elementos de pago -->
    <div id="payment-element-container">
      <div class="loading">Inicializando pasarela de pago...</div>
      <div id="payment-element"></div>
    </div>

    <button id="submit-button" type="button" disabled>
      <span id="button-text">Pagar ahora</span>
    </button>
  </div>
</div>

<script src="https://js.stripe.com/v3/"></script>
<script>
  import { ApiService } from "@/services/helper";
  import type { CheckoutPaymentIntentResponse, Result, CheckoutPaymentIntentRequest } from "@/types/bakend-types";
  import { showError, clearMessages, handlePayment } from "@/services/payment";
  import { getPrice } from "@/services/calendar";
  import type { PricingApiResponse } from "@/types/types";

  // Obtenemos la configuracion inicial
  const STRIPE_PUBLIC_KEY = import.meta.env.PUBLIC_STRIPE_API_KEY;
  const url_backend = import.meta.env.PUBLIC_BACKEND_URL;
  const helper = new ApiService();
  let stripe: any;
  let elements: any;
  let paymentElement: any;
  const params = new URLSearchParams(window.location.search);
  const slugType: string | null = params.get("type");
  const bookingUid: string | null = params.get("bookingUid");
  const testCountry: string | null = params.get("test_country");

  async function initializePrice(): Promise<number | undefined> {
    try {
      const apiUrl: string = testCountry ? `/api/pricing?test_country=${testCountry}` : "/api/pricing";
      const response: Response = await fetch(apiUrl);
      const pricingData: PricingApiResponse = (await response.json()) as PricingApiResponse;

      if (!slugType) {
        showError("No se proporcionó el slug de la clase.");
        return;
      } else if (!response.ok) {
        showError("No se pudo obtener el precio");
        return;
      }

      // Obtenemos el precio de la clase actual
      const pricing = getPrice(slugType, pricingData);
      const pricingElement = document.getElementById("pricing");
      if (!pricingElement) return;

      pricingElement.textContent = `${pricing} €`;

      return pricing;
    } catch (error: any) {
      showError(error.message);
    }
  }

  async function initializeStripe(pricing: number | undefined) {
    try {
      // Obtenemos el booking UID
      if (!STRIPE_PUBLIC_KEY || !url_backend)
        throw new Error("Configuración incompleta para el .env. Por favor, contacta al soporte.");

      // Inicializar Stripe, obtenemos el token JWT de Firebase
      stripe = window.Stripe(STRIPE_PUBLIC_KEY);

      if (!pricing) {
        showError("No se pudo obtener el precio para inicializar el pago.");
        return;
      }

      // Transformamos de euros a centimos
      const amount = Math.round(pricing * 100);

      const carry: CheckoutPaymentIntentRequest = {
        amount,
        currency: "EUR",
      };

      if (!carry) throw new Error("No se pudo obtener el pedido.");

      // Obtenemos el clinet secreat para elements
      let response: Result<CheckoutPaymentIntentResponse> = await helper.checkout(carry);

      // Comprobamos que la respuesta sea válida
      if (!response.success) throw new Error(`Error del servidor: ${response.error}`);

      // Obtenemos el secreto de cliente
      const data = response.data;

      // Crear Stripe Elements
      const appearance = {
        theme: "stripe",
        variables: {
          // Colores principales
          colorPrimary: "#eb5e61", // Color principal botones
          colorBackground: "transparent", // Fondo general
          colorText: "#808080", // Texto principal (gris)
          colorTextSecondary: "#8a4141", // Texto secundario / placeholders
          colorDanger: "#fa8072", // Mensajes de error
          colorSuccess: "#28a745", // Mensajes correctos

          // Tipografía
          fontSizeBase: "16px",
          fontFamily: "Arial, sans-serif",

          // Bordes
          borderRadius: "8px",
        },
        rules: {
          ".Input": {
            padding: "10px",
            border: "1px solid #ddd",
          },
          ".Input:focus": {
            borderColor: "#6d0006",
          },
          ".Button": {
            backgroundColor: "#6d0006",
            color: "#fff",
          },
          ".Button:hover": {
            backgroundColor: "#eb5e61", // Un color bonito, el mismo que el primario
            color: "#fff", // Mantén el texto blanco
            boxShadow: "0 2px 8px rgba(235, 94, 97, 0.2)", // Sombra suave
          },
        },
      };
      elements = stripe.elements({
        clientSecret: data.client_secret,
        appearance,
      });

      // Crear y montar el Payment Element
      paymentElement = elements.create("payment");

      // Ocultar loading y mostrar el elemento de pago
      const loading = document.querySelector(".loading") as HTMLDivElement | null;
      if (!loading || !loading.style) return;
      loading.style.display = "none";
      await paymentElement.mount("#payment-element");

      // 4️ Habilitar el botón de pago
      const submitButton = document.getElementById("submit-button") as HTMLButtonElement | null;
      if (!submitButton) return;
      submitButton.disabled = false;

      // 5 Manejar cambios en el elemento de pago
      paymentElement.on("change", (event: any) => {
        if (event.error) showError(event.error.message);
        else clearMessages();
      });
    } catch (error: any) {
      console.error("Error inicializando Stripe:", error);
      showError(`Error de inicialización de Stripe`);
    }
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener("DOMContentLoaded", async () => {
    try {
      // Esperamos a que cargue firebase antes de inicializar Stripe
      setTimeout(async () => {
        const price = await initializePrice();
        await initializeStripe(price);

        const submitButton = document.getElementById("submit-button");
        if (!submitButton) return;
        submitButton.addEventListener("click", () => handlePayment(stripe, elements, bookingUid));
      }, 1000);
    } catch (e) {
      console.error(e);
    }
  });
</script>
<style>
  .container {
    max-width: 600px;
    margin: 50px auto;
    padding: 20px;
    font-family: Arial, sans-serif;
  }

  .card {
    border-radius: 8px;
    padding: 30px;
  }

  h1 {
    text-align: center;
    color: #333;
    margin-bottom: 30px;
  }

  .message {
    padding: 12px;
    border-radius: 4px;
    margin-bottom: 20px;
    display: none;
  }

  .success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  .error-message {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }

  #payment-element {
    margin: 20px 0;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    min-height: 40px;
  }

  .loading {
    text-align: center;
    color: #666;
    padding: 20px;
  }

  #submit-button {
    width: 100%;
    background-color: var(--color-salmon);
    color: white;
    border: none;
    padding: 12px 20px;
    border-radius: 4px;
    font-size: 16px;
    cursor: pointer;
    margin-top: 20px;
  }

  #submit-button:disabled {
    background-color: #aaa;
    cursor: not-allowed;
  }

  #submit-button:hover:not(:disabled) {
    background-color: var(--color-light-brown);
  }
</style>
