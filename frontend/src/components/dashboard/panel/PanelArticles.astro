---
import StatsCard from "../StatsCard.astro";

const { stats } = Astro.props;
---

<!-- Stats Cards -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
  <StatsCard
    title="Total Usuarios"
    value={stats.totalUsers.toLocaleString()}
    change={stats.changes.totalUsers}
    iconType="users"
  />
  <StatsCard
    title="Usuarios Activos"
    value={stats.activeUsers.toLocaleString()}
    change={stats.changes.activeUsers}
    iconType="active"
  />
  <StatsCard
    title="Nuevos Este Mes"
    value={stats.newUsers.toLocaleString()}
    change={stats.changes.newUsers}
    iconType="new"
  />
  <StatsCard
    title="Tasa de Conversión"
    value={`${stats.conversionRate.toFixed(1)}%`}
    change={stats.changes.conversionRate}
    iconType="conversion"
  />
</div>

<div class="bg-[#fff4e1] rounded-xl shadow-sm border border-[#fee8d6] p-6">
  <div class="mb-6">
    <h2 class="text-xl font-bold text-[#131313] mb-2">Click en articulos</h2>
    <p class="text-[#8a4141] text-sm">Evolución de clics en artículos en los últimos 12 meses</p>
  </div>

  <div class="relative" style="height: 400px;">
    <canvas id="activeUsersChart"></canvas>
  </div>
</div>

<script>
  import { ApiService } from "@/services/helper";
  import type { Result } from "@/types/bakend-types";
  import type { MetricsResponse } from "@/types/types";
  import { mapToMonths, parseArticleMetricData } from "@/utils/metrics";
  import Chart from "chart.js/auto";

  document.addEventListener("DOMContentLoaded", async () => {
    const ctx = document.getElementById("activeUsersChart") as HTMLCanvasElement;
    if (!ctx) return;

    // Configuración de meses y etiquetas
    const currentMonth = new Date().getMonth();
    const monthLabels = ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"];
    const currentYear = new Date().getFullYear();

    // Función para generar los últimos N meses
    const makeLastNMonths = (currentMonthIndex: number, count: number) => {
      return Array.from({ length: count }, (_, i) => {
        const monthIndex = (currentMonthIndex - (count - 1 - i) + 12) % 12;
        return `${monthLabels[monthIndex]} ${currentYear}`;
      });
    };

    // Generar labels de los últimos 6 meses
    const labels = makeLastNMonths(currentMonth, 6);

    try {
      const helper = new ApiService();

      const metrics: Result<MetricsResponse> = await helper.getArticlesMetrics();
      if (!metrics.success) throw new Error("No se encontraron las metricas");

      // Agrupar cada artículo por mes y sumar los clics
      const parsedArticleData = metrics.data.rows.map(parseArticleMetricData);

      // Agrupar clics a articulos totales por mes
      const articleClicksMap = new Map<string, number>();
      parsedArticleData.forEach((item) => {
        const current = articleClicksMap.get(item.yearMonth) || 0;
        articleClicksMap.set(item.yearMonth, current + item.eventCount);
      });

      // Mapear a los labels del chart
      const articleClicksData = mapToMonths(articleClicksMap, labels, monthLabels);

      new Chart(ctx, {
        type: "bar",
        data: {
          labels: labels,
          datasets: [
            {
              label: "Clics por Artículo",
              data: articleClicksData,
              backgroundColor: "#b2443a",
              borderColor: "#6d0006",
              borderWidth: 2,
              borderRadius: 8,
              hoverBackgroundColor: "#fa8072",
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          indexAxis: "x", // o 'y' para barras horizontales
          plugins: {
            legend: {
              display: false, // No necesitas leyenda con un solo dataset
            },
            tooltip: {
              backgroundColor: "rgba(95, 73, 73, 0.95)",
              titleColor: "#fff4e1",
              bodyColor: "#fee8d6",
              padding: 12,
              borderColor: "rgba(178, 68, 58, 0.3)",
              borderWidth: 1,
              displayColors: false,
              callbacks: {
                label: function (context) {
                  const y = Number(context.parsed?.y ?? 0);
                  return `Clics: ${y.toLocaleString()}`;
                },
              },
            },
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                color: "#8a4141",
                font: { size: 12 },
              },
              grid: { color: "rgba(138, 65, 65, 0.1)" },
            },
            x: {
              ticks: {
                color: "#8a4141",
                font: { size: 11 },
                maxRotation: 45,
                minRotation: 45,
              },
              grid: { display: false },
            },
          },
        },
      });
    } catch (error) {
      console.error("Error fetching or rendering chart data:", error);
    }
  });
</script>
