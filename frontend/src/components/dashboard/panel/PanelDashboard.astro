---
import StatsCard from "../StatsCard.astro";

const { stats } = Astro.props;
---

<!-- Stats Cards -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
  <StatsCard
    title="Total Usuarios"
    value={stats.totalUsers.toLocaleString()}
    change={stats.changes.totalUsers}
    iconType="users"
  />
  <StatsCard
    title="Usuarios Activos"
    value={stats.activeUsers.toLocaleString()}
    change={stats.changes.activeUsers}
    iconType="active"
  />
  <StatsCard
    title="Nuevos Este Mes"
    value={stats.newUsers.toLocaleString()}
    change={stats.changes.newUsers}
    iconType="new"
  />
  <StatsCard
    title="Tasa de Conversión"
    value={`${stats.conversionRate.toFixed(1)}%`}
    change={stats.changes.conversionRate}
    iconType="conversion"
  />
</div>

<div class="bg-[#fff4e1] rounded-xl shadow-sm border border-[#fee8d6] p-6">
  <div class="mb-6">
    <h2 class="text-xl font-bold text-[#131313] mb-2">Analiticas</h2>
    <p class="text-[#8a4141] text-sm">Evolución de la web en los últimos 12 meses</p>
  </div>

  <div class="relative" style="height: 400px;">
    <canvas id="activeUsersChart"></canvas>
  </div>
</div>

<script>
  import { ApiService } from "@/services/helper";
  import { parseArticleMetricData, parseUsersMetricData, parseClassMetricData } from "@/utils/metrics";
  import Chart from "chart.js/auto";

  document.addEventListener("DOMContentLoaded", async () => {
    const ctx = document.getElementById("activeUsersChart") as HTMLCanvasElement;

    if (!ctx) return;

    // Crear gradiente para el fondo del área
    const gradient = ctx.getContext("2d")!.createLinearGradient(0, 0, 0, 400);
    gradient.addColorStop(0, "rgba(178, 68, 58, 0.25)");
    gradient.addColorStop(1, "rgba(178, 68, 58, 0)");

    const currentMonth = new Date().getMonth();
    const monthLabels = ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"];
    const currentYear = new Date().getFullYear();

    const makeLastNMonths = (currentMonthIndex: number, count: number) => {
      return Array.from({ length: count }, (_, i) => {
        const monthIndex = (currentMonthIndex - (count - 1 - i) + 12) % 12;
        return `${monthLabels[monthIndex]} ${currentYear}`; // Ahora mostrará "Oct 2025"
      });
    };

    // Y actualiza getMonthKey para usar año completo:
    const getMonthKey = (label: string) => {
      const monthIndex = monthLabels.indexOf(label.split(" ")[0]);
      const year = label.split(" ")[1];
      return `${year}${String(monthIndex + 1).padStart(2, "0")}`;
    };

    try {
      const helper = new ApiService();

      // Obtener todas las métricas
      const [userMetrics, articlesMetrics, classMetrics] = await Promise.all([
        helper.getUserMetrics(),
        helper.getArticlesMetrics(),
        helper.getClassMetrics(),
      ]);
      if (!userMetrics.success || !articlesMetrics.success || !classMetrics.success)
        throw new Error("Error al obtener métricas");

      // Parsear todas las filas, artículos, usuarios y clases
      const parsedUserData = userMetrics.data.rows.map(parseUsersMetricData);
      const parsedArticleData = articlesMetrics.data.rows.map(parseArticleMetricData);
      const parsedClassData = classMetrics.data.rows.map(parseClassMetricData);

      // Agrupar por total de clases por mes
      const totalByMonth = new Map<string, number>();
      parsedClassData.forEach((item) => {
        const currentTotal = totalByMonth.get(item.yearMonth) || 0;
        totalByMonth.set(item.yearMonth, currentTotal + item.bookings);
      });

      // Agrupar clics a articulos totales por mes
      const articleClicksMap = new Map<string, number>();
      parsedArticleData.forEach((item) => {
        // Extraer mes del pagePath si lo necesitas, o agrupar todo el periodo
        const current = articleClicksMap.get("total") || 0;
        articleClicksMap.set("total", current + item.activeUsers);
      });

      // O si quieres clics por mes, necesitas que el backend devuelva yearMonth como dimensión adicional
      // Por ahora, añade al chart como línea constante:
      const totalArticleClicks = parsedArticleData.reduce((sum, item) => sum + item.activeUsers, 0);
      const articleClicksPerMonth = totalArticleClicks / 6; // Promedio mensual

      // Crear mapas para cada métrica que necesites visualizar
      const activeUsersMap = new Map<string, number>();
      const sessionsMap = new Map<string, number>();
      parsedUserData.forEach((m) => {
        activeUsersMap.set(m.yearMonth, m.activeUsers);
        sessionsMap.set(m.yearMonth, m.sessions);
      });

      // Generar labels de los últimos 6 meses
      const labels = makeLastNMonths(currentMonth, 6);

      // Mapear los datos a los meses correctos
      const activeUsersChartData = labels.map((label) => {
        const monthIndex = monthLabels.indexOf(label.split(" ")[0]);
        const year = label.split(" ")[1];
        const monthKey = `${year}${String(monthIndex + 1).padStart(2, "0")}`;

        return activeUsersMap.get(monthKey) ?? 0;
      });

      // Si necesitas datos de otra métrica:
      const sessionsChartData = labels.map((label) => {
        const monthIndex = monthLabels.indexOf(label.split(" ")[0]);
        const year = label.split(" ")[1];
        const monthKey = `${year}${String(monthIndex + 1).padStart(2, "0")}`;

        return sessionsMap.get(monthKey) ?? 0;
      });

      // Datos de reservas de clases
      const bookingsData = labels.map((l) => totalByMonth.get(getMonthKey(l)) || 0);

      new Chart(ctx, {
        type: "line",
        data: {
          labels: labels,
          datasets: [
            {
              label: "Usuarios Activos",
              data: activeUsersChartData,
              borderColor: "#b2443a",
              backgroundColor: gradient,
              borderWidth: 3,
              fill: true,
              tension: 0.4,
              pointRadius: 4,
              pointBackgroundColor: "#b2443a",
            },
            {
              label: "Sesiones",
              data: sessionsChartData,
              borderColor: "#fa8072",
              backgroundColor: "rgba(250, 128, 114, 0.1)",
              borderWidth: 3,
              fill: true,
              tension: 0.4,
              pointRadius: 4,
              pointBackgroundColor: "#fa8072",
            },
            {
              label: "Reservas de Clases",
              data: labels.map((l) => totalByMonth.get(getMonthKey(l)) || 0),
              borderColor: "#6d0006",
              backgroundColor: "rgba(109, 0, 6, 0.1)",
              borderWidth: 3,
              fill: true,
              tension: 0.4,
              pointRadius: 4,
              pointBackgroundColor: "#6d0006",
            },
            {
              label: "Clics de Artículos",
              data: Array(6).fill(articleClicksPerMonth),
              borderColor: "#ffbba8",
              borderWidth: 2,
              borderDash: [5, 5],
              fill: false,
              pointRadius: 4,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: true,
              position: "top",
              align: "end",
              labels: {
                usePointStyle: true,
                pointStyle: "circle",
                padding: 20,
                font: {
                  size: 13,
                  family: "'Inter', sans-serif",
                },
                color: "#8a4141",
                boxWidth: 8,
                boxHeight: 8,
              },
              onClick: (e, legendItem, legend) => {
                const index = legendItem.datasetIndex!;
                const chart = legend.chart;
                const meta = chart.getDatasetMeta(index);
                meta.hidden = !meta.hidden;
                chart.update();
              },
            },
            tooltip: {
              backgroundColor: "rgba(95, 73, 73, 0.95)",
              titleColor: "#fff4e1",
              bodyColor: "#fee8d6",
              padding: 12,
              borderColor: "rgba(178, 68, 58, 0.3)",
              borderWidth: 1,
              displayColors: false,
              callbacks: {
                label: function (context) {
                  const value = context.parsed.y ?? 0;
                  const label = context.dataset.label || "";
                  return `${label}: ${value.toLocaleString()}`;
                },
                afterLabel: function (context) {
                  const currentValue = context.parsed.y ?? 0;

                  // Si es el primer punto, no hay comparación
                  if (context.dataIndex === 0) {
                    return "";
                  }

                  const previousValue = context.dataset.data[context.dataIndex - 1] as number;
                  const change = currentValue - previousValue;

                  // Si el valor anterior era 0, solo mostrar el cambio absoluto
                  if (previousValue === 0) {
                    return change > 0 ? `↗ +${change}` : "";
                  }

                  const percentChange = ((change / previousValue) * 100).toFixed(1);
                  return change >= 0 ? `↗ +${change} (+${percentChange}%)` : `↘ ${change} (${percentChange}%)`;
                },
              },
            },
          },
          scales: {
            y: {
              beginAtZero: false,
              min: 0,
              max:
                Math.max(...activeUsersChartData, ...sessionsChartData, ...bookingsData, articleClicksPerMonth) * 1.2,
              ticks: {
                color: "#8a4141",
                font: {
                  size: 12,
                },
                callback: function (value) {
                  return value.toLocaleString();
                },
              },
              grid: {
                color: "rgba(138, 65, 65, 0.1)",
              },
              border: {
                display: false,
              },
            },
            x: {
              ticks: {
                color: "#8a4141",
                font: {
                  size: 12,
                },
                maxRotation: 45,
                minRotation: 45,
              },
              grid: {
                display: false,
              },
              border: {
                display: false,
              },
            },
          },
          interaction: {
            intersect: false,
            mode: "nearest",
          },
        },
      });
    } catch (error) {
      console.error("Error fetching or rendering chart data:", error);
    }
  });
</script>
