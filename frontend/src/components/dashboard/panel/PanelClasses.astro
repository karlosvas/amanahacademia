---
import StatsCard from "../StatsCard.astro";

const { stats } = Astro.props;
---

<!-- Stats Cards --><!-- <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
  <StatsCard
    title="Total Usuarios"
    value={stats.totalUsers.toLocaleString()}
    change={stats.changes.totalUsers}
    iconType="users"
  />
  <StatsCard
    title="Usuarios Activos"
    value={stats.activeUsers.toLocaleString()}
    change={stats.changes.activeUsers}
    iconType="active"
  />
  <StatsCard
    title="Nuevos Este Mes"
    value={stats.newUsers.toLocaleString()}
    change={stats.changes.newUsers}
    iconType="new"
  />
  <StatsCard
    title="Tasa de Conversión"
    value={`${stats.conversionRate.toFixed(1)}%`}
    change={stats.changes.conversionRate}
    iconType="conversion"
  />
</div> -->
<div class="bg-white rounded-xl shadow-sm border border-[#fee8d6] p-6">
  <div class="mb-6">
    <h2 class="text-xl font-bold text-[#131313] mb-2">Estadísticas de Clases Reservadas</h2>
    <p class="text-[#8a4141] text-sm">Evolución de clases reservadas en los últimos 12 meses</p>
  </div>

  <div class="relative" style="height: 400px;">
    <canvas id="activeUsersChart"></canvas>
  </div>
</div>

<script>
  import { Class } from "@/enums/enums";
  import { ApiService } from "@/services/helper";
  import type { Result } from "@/types/bakend-types";
  import type { MetricsResponse } from "@/types/types";
  import Chart from "chart.js/auto";

  document.addEventListener("DOMContentLoaded", async () => {
    const ctx = document.getElementById("activeUsersChart") as HTMLCanvasElement;
    if (!ctx) return;

    const gradient = ctx.getContext("2d")!.createLinearGradient(0, 0, 0, 400);
    gradient.addColorStop(0, "rgba(178, 68, 58, 0.25)");
    gradient.addColorStop(1, "rgba(178, 68, 58, 0)");

    const currentMonth = new Date().getMonth();
    const monthLabels = ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"];
    const currentYear = new Date().getFullYear().toString().slice(-2);

    const makeLastNMonths = (currentMonthIndex: number, count: number) => {
      return Array.from({ length: count }, (_, i) => {
        const monthIndex = (currentMonthIndex - (count - 1 - i) + 12) % 12;
        return `${monthLabels[monthIndex]} ${currentYear}`;
      });
    };

    const getMonthKey = (label: string) => {
      const monthIndex = monthLabels.indexOf(label.split(" ")[0]);
      const year = "20" + label.split(" ")[1];
      return `${year}${String(monthIndex + 1).padStart(2, "0")}`;
    };

    try {
      const helper = new ApiService();
      const metrics: Result<MetricsResponse> = await helper.getClassMetrics();
      if (!metrics.success) throw new Error("No se encontraron las metricas");

      // Parsear datos: yearMonth, eventName, bookings
      const parsedData = metrics.data.rows.map((row) => ({
        yearMonth: row.dimensionValues[0].value,
        eventName: row.dimensionValues[1].value,
        bookings: parseInt(row.metricValues[0].value),
      }));

      // Agrupar por mes (total)
      const totalByMonth = new Map<string, number>();
      const freeByMonth = new Map<string, number>();
      const individualByMonth = new Map<string, number>();
      const standardByMonth = new Map<string, number>();

      parsedData.forEach((item) => {
        // Total
        const currentTotal = totalByMonth.get(item.yearMonth) || 0;
        totalByMonth.set(item.yearMonth, currentTotal + item.bookings);

        // Por tipo
        const eventLower = item.eventName.toLowerCase();

        if (eventLower.includes("free")) {
          const current = freeByMonth.get(item.yearMonth) || 0;
          freeByMonth.set(item.yearMonth, current + item.bookings);
        } else if (eventLower.includes("individual")) {
          const current = individualByMonth.get(item.yearMonth) || 0;
          individualByMonth.set(item.yearMonth, current + item.bookings);
        } else if (eventLower.includes("standard")) {
          const current = standardByMonth.get(item.yearMonth) || 0;
          standardByMonth.set(item.yearMonth, current + item.bookings);
        }
      });

      const labels = makeLastNMonths(currentMonth, 6);

      new Chart(ctx, {
        type: "line",
        data: {
          labels: labels,
          datasets: [
            {
              label: "Total Reservas",
              data: labels.map((l) => totalByMonth.get(getMonthKey(l)) || 0),
              borderColor: "#b2443a",
              backgroundColor: gradient,
              borderWidth: 3,
              fill: true,
              tension: 0.4,
              pointRadius: 6,
              pointBackgroundColor: "#b2443a",
            },
            {
              label: "Clases Grupales",
              data: labels.map((l) => freeByMonth.get(getMonthKey(l)) || 0),
              borderColor: "#fa8072",
              backgroundColor: "rgba(250, 128, 114, 0.1)",
              borderWidth: 3,
              fill: true,
              tension: 0.4,
              pointRadius: 6,
              pointBackgroundColor: "#fa8072",
            },
            {
              label: "Clases Individuales",
              data: labels.map((l) => individualByMonth.get(getMonthKey(l)) || 0),
              borderColor: "#d89c8d",
              backgroundColor: "rgba(216, 156, 141, 0.1)",
              borderWidth: 3,
              fill: true,
              tension: 0.4,
              pointRadius: 6,
              pointBackgroundColor: "#d89c8d",
            },
            {
              label: "Clases Estándar",
              data: labels.map((l) => standardByMonth.get(getMonthKey(l)) || 0),
              borderColor: "#8a4141",
              backgroundColor: "rgba(138, 65, 65, 0.1)",
              borderWidth: 3,
              fill: true,
              tension: 0.4,
              pointRadius: 6,
              pointBackgroundColor: "#8a4141",
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: true, position: "top", align: "end" },
            tooltip: {
              backgroundColor: "rgba(95, 73, 73, 0.95)",
              titleColor: "#fff4e1",
              bodyColor: "#fee8d6",
              padding: 12,
              callbacks: {
                label: function (context) {
                  const y = Number(context.parsed?.y ?? 0);
                  return `${context.dataset.label}: ${y.toLocaleString()} reservas`;
                },
              },
            },
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: { color: "#8a4141" },
              grid: { color: "rgba(138, 65, 65, 0.1)" },
            },
            x: {
              ticks: { color: "#8a4141", maxRotation: 45 },
              grid: { display: false },
            },
          },
        },
      });
    } catch (error) {
      console.error("Error fetching or rendering chart data:", error);
    }
  });
</script>
