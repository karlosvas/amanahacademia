---
import CardComment from "./CardComment.astro";
import StarGroup from "./StarGroup.astro";
import Stadistics from "./Stadistics.astro";
import type { Comment } from "@/types/types";
import { toast } from "solid-toast";

const url_backend = import.meta.env.PUBLIC_BACKEND_URL as string;
let comments: Comment[] = [];

try {
  const res = await fetch(url_backend + "/comments/all", {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  });
  if (!res.ok) throw new Error();

  const response = await res.json();
  if (response.success) {
    comments = Object.entries(response.data).map(([key, value]) => ({
      author_uid: key,
      ...(typeof value === "object" && value !== null ? value : {}),
    }));
  } else {
    throw new Error();
  }
} catch (err) {
  toast.error("Error al cargar los comentarios");
}
---

<main
  class="py-10 lg:mt-0 mb-20 m-auto w-full 2xl:w-3/4
              grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3
              gap-6 lg:gap-8 items-start justify-items-center"
>
  <!-- Sección 1: Estadísticas y comentarios destacados -->
  <div class="w-full max-w-sm">
    <div class="text-center mb-6">
      <p class="text-7xl font-bold">3.75</p>
      <StarGroup star={4} />
    </div>
    <h5 class="text-salmon ml-3 mb-4 font-semibold">Comentarios con mas me gusta</h5>
    <div class="space-y-4">
      <CardComment name="ana.banana" fecha="12 ago 2025" />
      <CardComment name="carmen_ortega" fecha="15 apr 2023" />
    </div>
  </div>

  <!-- Sección 2: Elementos de evaluación -->
  <div class="p-6 bg-[--color-brown] rounded-2xl w-full max-w-sm">
    <h5 class="text-[--color-salmon] text-xl font-semibold mb-4">Elementos de evaluacion</h5>
    <div class="space-y-3">
      <Stadistics title="Profesionalismo" percentage="70" />
      <Stadistics title="Eficiencia" percentage="50" />
      <Stadistics title="Respuesta de tiempo de los servicios" percentage="90" />
      <Stadistics title="Tiempo de contacto administrativo" percentage="60" />
      <Stadistics title="Satisfacción del usuario" percentage="89" />
    </div>
  </div>

  <!-- Sección 3: Botón comentar y más comentarios -->
  <div
    class="w-full max-w-none md:col-span-2 lg:col-span-1 lg:max-w-sm flex flex-col items-center justify-self-center lg:justify-self-auto"
  >
    <button
      class="bg-lightRed hover:bg-salmon transition-colors duration-300
           rounded-lg text-gray-100 text-xl font-semibold w-full max-w-56
           py-3 px-6 shadow-lg hover:shadow-xl transform
           transition-all duration-200 mb-6 mt-10 lg:mt-0 hover:bg-salmon"
    >
      Comentar
    </button>
    <div class="w-full grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-1 gap-4 sm:gap-6 px-2 sm:px-0 justify-items-center">
      {comments && comments.length > 0 && comments.map((comment: Comment) => <CardComment data={comment} />)}
    </div>
  </div>
</main>

<script>
  import { submitLike } from "@/services/comments";
  import { getAuth } from "firebase/auth";
  import toast from "solid-toast";

  document.addEventListener("DOMContentLoaded", function () {
    const likeIcons = document.querySelectorAll(".like-icon");

    likeIcons.forEach(async (icon) => {
      const svg = icon.querySelector(".like-svg");
      const likeCountSpan = icon.querySelector("span");
      let isLiked = icon.classList.contains("liked");
      icon.addEventListener("click", async () => {
        const actualUser = getAuth().currentUser;

        if (!actualUser) {
          // El usuario no está autenticado
          console.error("You are not logged in");
          toast.error("You are not logged in");
          return;
        }

        if (svg && likeCountSpan) {
          // Añadir animación de pulso al hacer click
          svg.classList.add("pulse");

          try {
            // Llamar a la función de submitLike que maneja el backend
            await submitLike(icon as HTMLDivElement, likeCountSpan as HTMLSpanElement);

            // Toggle del estado visual después del éxito
            isLiked = !isLiked;

            if (isLiked) {
              // Agregar like: aplicar estilos rojos
              icon.classList.add("liked");
              svg.classList.add("liked");
              console.log("Like added - red styles applied");
            } else {
              // Quitar like: volver a estilos grises por defecto
              icon.classList.remove("liked");
              svg.classList.remove("liked");
              console.log("Like removed - default gray styles applied");
            }
          } catch (error) {
            console.error("Error submitting like:", error);
            // En caso de error, no cambiar el estado visual
          }

          // ✅ Remover animación de pulso después de 300ms
          setTimeout(() => {
            svg.classList.remove("pulse");
          }, 300);
        }
      });
    });
  });
</script>
