---
import type { HeaderI18n } from "@/types/types";
import Hamburger from "@/components/common/Hamburger.astro";
import Traductor from "@/components/common/Traductor.astro";
import Theme from "@/components/common/Theme.astro";
import AuthModal from "@/components/common/AuthModal.astro";
import type { Lang } from "@/types/types";
import { labels_header } from "../../../i18n/index";

// Obtener las traduccciones
const data = Astro.props.data as HeaderI18n;
let { lang } = Astro.params as { lang?: Lang };
const theme = Astro.cookies.get("theme")?.value ?? "light";

if (!lang) lang = "es";

// Guardamos el lengauje en las cookies
Astro.cookies.set("lang", lang, { path: "/", maxAge: 31536000 });
---

<header
  class="font-semibold fixed top-0 left-0 w-full z-50 h-20 bg-background flex items-center justify-between px-5 md:px-10"
>
  <AuthModal
    data={data.identification.modal}
    label={labels_header[lang]?.identificationButton || "Iniciar sesión en Amanah Academia"}
  />
  <Hamburger data={data} />
  <a href={`/${lang === "es" ? "" : lang}`}>
    <img
      src={theme === "dark" ? "/img/logo_amanah_dark.webp" : "/img/logo_amanah.webp"}
      alt="Logo empresa Amanah Academia"
      class="h-full w-20 hidden lg:block"
      id="logo_amanah"
      fetchpriority="high"
    />
  </a>
  <nav id="select-page" class="hidden lg:block absolute left-1/2 top-8 h-full flex items-center z-10 -translate-x-1/2">
    <ul class="flex flex-row gap-6 items-center color-red text-red font-jomolhari justify-center whitespace-nowrap">
      <li><a href={Astro.params.lang ? `/${Astro.params.lang}/` : "/"}>{data.about_us}</a></li>
      <li><a href={Astro.params.lang ? `/${Astro.params.lang}/articles` : "/articles"}>{data.articles}</a></li>
      <li><a href={Astro.params.lang ? `/${Astro.params.lang}/pricing` : "/pricing"}>{data.pricing}</a></li>
      <li><a href={Astro.params.lang ? `/${Astro.params.lang}/courses` : "/courses"}>{data.courses}</a></li>
      <li><a href={Astro.params.lang ? `/${Astro.params.lang}/comments` : "/comments"}>{data.comments}</a></li>
      <li><a href={Astro.params.lang ? `/${Astro.params.lang}/contact` : "/contact"}>{data.contact}</a></li>
    </ul>
  </nav>
  <div class="flex z-10">
    <button
      id="identification"
      class="bg-lightRed hover:bg-salmon transition-colors rounded-lg text-gray-50 font-semibold py-2 mr-3 shadow-lg hover:shadow-xl transition-all duration-200 text-xs px-3 hidden lg:block"
      data-header={JSON.stringify(data.identification)}
      aria-label={labels_header[lang]?.identificationButton || "Iniciar sesión en Amanah Academia"}
    >
      {data.identification.button.login}
    </button>
    <Theme />
    <Traductor label={labels_header[lang]?.traductor || "Cambiar idioma"} />
  </div>
</header>

<script>
  import { getFirebaseAuth, setupAuth, onAuthStateChanged } from "@/services/firebase";

  // Referencias al modal de login y register
  const authModalLogin = document.getElementById("authModalLogin") as HTMLDialogElement;
  const formLogin = authModalLogin.querySelector("form") as HTMLFormElement;
  const btnIdentification = document.getElementById("identification") as HTMLButtonElement;
  const headerData = JSON.parse(btnIdentification.dataset.header || "");
  const panelAnalitics = document.getElementById("admin-panel");

  // Actualizamos segun el tamaño de la ventana
  document.addEventListener("DOMContentLoaded", async () => {
    // Obtenemos la instancia de auth
    const auth = await getFirebaseAuth();

    window.addEventListener("resize", async () => {
      setupAuth(auth.currentUser, authModalLogin, formLogin, headerData);
    });

    // Firebase auth state
    onAuthStateChanged((user) => {
      setupAuth(user, authModalLogin, formLogin, headerData);

      const isAdmin =
        !!user?.email &&
        (user.email.endsWith("@amanahacademia.com") ||
          user.email === "carlosvassan@gmail.com" ||
          user.email === "anaortgut2025@gmail.com");

      if (panelAnalitics) {
        // Mostrar/ocultar de forma consistente
        panelAnalitics.hidden = !isAdmin;
        panelAnalitics.classList.toggle("hidden", !isAdmin);
        panelAnalitics.classList.toggle("block", isAdmin);
        panelAnalitics.setAttribute("aria-hidden", String(!isAdmin));
      }
    });
  });
</script>
