---
import Avatar from "@/components/common/Avatar.astro";
import type { CommentI18n, ModalComent } from "@/types/types";
import StarsSelectionIcon from "@/assets/star-selecion.svg";
import ArrowSubmitIcon from "@/assets/arrow-submit.svg";

const comment = Astro.props.data as CommentI18n;
const dataModal = comment.modal as ModalComent;
const edit = (Astro.props.edit as boolean) || false;
const idCommentShared = Astro.props.id as string;

if (!idCommentShared) {
  console.error("CommentModal component requires an 'id' prop.");
  return;
}

const formId = `comment-form-${idCommentShared}`;
const starRatingId = `star-rating-${idCommentShared}`;
const ratingValueId = `rating-value-${idCommentShared}`;
const avatarNameId = `avatar-name-${idCommentShared}`;
const commentTextId = `comment-text-${idCommentShared}`;
const resetBtnId = `reset-btn-${idCommentShared}`;
const submitBtnId = edit ? `update-btn-${idCommentShared}` : `submit-btn-${idCommentShared}`;
---

<dialog
  id={idCommentShared}
  data-edit={edit}
  data-comment-modal="true"
  class="modal border-0 rounded-2xl p-0 shadow-2xl bg-gradient-to-br from-white to-smoothBrown overflow-hidden font-normal text-sm w-full max-w-96"
>
  <div class="bg-lightSalmon rounded-lg shadow-lg p-6 max-w-sm w-full">
    <form id={formId}>
      <!-- Header -->
      <div class="space-y-3">
        <h2 class="text-[var(--color-brown)] text-center font-medium text-lg">
          {dataModal.title}
        </h2>
      </div>

      <!-- Rating Section -->
      <div class="space-y-3 mb-10">
        <label class="block text-[var(--color-brown)] text-center font-medium">
          {dataModal.description}
        </label>
        <div id={starRatingId} class="flex justify-center space-x-2">
          {
            Array.from({ length: 5 }).map((_, i) => (
              <button
                type="button"
                data-star={i + 1}
                class="star-btn transition-all duration-200 hover:scale-110 outline-none focus:outline-none rounded"
              >
                <StarsSelectionIcon />
              </button>
            ))
          }
        </div>
        <input type="hidden" id={ratingValueId} value="0" />
      </div>

      <!-- User Info Section -->
      <div class="flex items-center space-x-3 bg-lightRed rounded-xl p-3 backdrop-blur-sm">
        <div
          class="avatar-container h-10 w-10 rounded-full bg-[var(--color-salmon)] text-white flex items-center justify-center ring-2 ring-[var(--color-salmon)] font-medium"
        >
          <Avatar info={null} server={false} />
        </div>
        <span id={avatarNameId} class="text-black font-medium">{comment.loading}</span>
      </div>

      <!-- Comment Section -->
      <textarea
        id={commentTextId}
        rows="6"
        class="mt-2 bg-[--color-custom-gray] border-2 border-[--color-custom-gray] rounded-xl py-4 px-2 outline-none w-full focus:border-salmon focus:ring-1 focus:ring-salmon transition-all duration-200 shadow-sm resize-none placeholder-gray-400 text-black"
        placeholder={dataModal.placeholder}></textarea>

      <!-- Action Buttons -->
      <div class="flex justify-between gap-3 pt-2">
        <button
          type="button"
          id={resetBtnId}
          class="border-2 border-[var(--color-salmon)] text-[var(--color-salmon)] hover:bg-[var(--color-salmon)] hover:text-white transition-all duration-200 font-medium py-2 px-4 rounded-xl"
        >
          {dataModal.cleanup}
        </button>
        <button
          type="submit"
          id={submitBtnId}
          disabled
          class="bg-[var(--color-light-red)] hover:bg-[var(--color-red)] text-white font-medium py-2 px-6 rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
        >
          <ArrowSubmitIcon />
          {dataModal.submit}
        </button>
      </div>
    </form>
  </div>
</dialog>

<script>
  import { ApiService } from "@/services/helper";
  import toast from "solid-toast";
  import type { Comment, UpdateComment } from "@/types/bakend-types";
  import { closeModalAnimation } from "@/utils/modals";
  import { FrontendErrorCode, getErrorToast } from "@/enums/enums";
  import { onAuthStateChanged } from "@/services/firebase";
  import type { User } from "firebase/auth";
  import { getFirebaseAuth } from "@/services/firebase";

  class CommentModal {
    private id: string;
    private form!: HTMLFormElement;
    private starButtons!: NodeListOf<HTMLButtonElement>;
    private commentText!: HTMLTextAreaElement;
    private ratingValue!: HTMLInputElement;
    private submitBtn!: HTMLButtonElement;
    private resetBtn!: HTMLButtonElement;
    private avatarName!: HTMLElement;
    private rating: number = 0;
    private hoverRating: number = 0;
    private modal: HTMLDialogElement;
    private edit!: boolean;

    constructor(idBase: string) {
      this.id = idBase;
      this.modal = document.getElementById(idBase) as HTMLDialogElement;

      if (!this.modal) {
        console.error("Modal element not found:", idBase);
        return;
      }

      this.edit = this.modal.dataset.edit === "true";

      // Construir IDs
      const formId = `comment-form-${idBase}`;
      const ratingValueId = `rating-value-${idBase}`;
      const avatarNameId = `avatar-name-${idBase}`;
      const commentTextId = `comment-text-${idBase}`;
      const resetBtnId = `reset-btn-${idBase}`;
      const submitBtnId = this.edit ? `update-btn-${idBase}` : `submit-btn-${idBase}`;

      // Obtener elementos
      this.form = document.getElementById(formId) as HTMLFormElement;
      this.starButtons = this.modal.querySelectorAll(".star-btn");
      this.commentText = document.getElementById(commentTextId) as HTMLTextAreaElement;
      this.ratingValue = document.getElementById(ratingValueId) as HTMLInputElement;
      this.submitBtn = document.getElementById(submitBtnId) as HTMLButtonElement;
      this.resetBtn = document.getElementById(resetBtnId) as HTMLButtonElement;
      this.avatarName = document.getElementById(avatarNameId) as HTMLElement;

      // Verificar que se encontraron todos los elementos
      if (
        !this.form ||
        !this.starButtons.length ||
        !this.commentText ||
        !this.ratingValue ||
        !this.submitBtn ||
        !this.resetBtn ||
        !this.avatarName
      ) {
        console.error("Algunos elementos del modal no se encontraron:", {
          form: !!this.form,
          starButtons: this.starButtons.length,
          commentText: !!this.commentText,
          ratingValue: !!this.ratingValue,
          submitBtn: !!this.submitBtn,
          resetBtn: !!this.resetBtn,
          avatarName: !!this.avatarName,
        });
        return;
      }
      // Inicializar
      this.initEventListeners();
      this.loadUserInfo();
    }

    private initEventListeners() {
      // Event listeners para las estrellas
      this.starButtons.forEach((star, index) => {
        // Click event
        star.addEventListener("click", (e) => {
          e.preventDefault();
          this.rating = index + 1;
          this.ratingValue.value = this.rating.toString();
          this.updateStars();
          this.validateForm();
        });

        // Hover events
        star.addEventListener("mouseenter", () => {
          this.hoverRating = index + 1;
          this.updateStars();
        });

        star.addEventListener("mouseleave", () => {
          this.hoverRating = 0;
          this.updateStars();
        });
      });

      // Event listener para el textarea
      this.commentText.addEventListener("input", () => {
        this.validateForm();
      });

      // Event listener para el botón reset
      this.resetBtn.addEventListener("click", (e) => {
        e.preventDefault();
        this.resetForm();
      });

      // Event listener para el formulario
      this.form.addEventListener("submit", (e) => {
        e.preventDefault();
        this.handleSubmit();
      });
    }

    private updateStars() {
      const currentRating = this.hoverRating || this.rating;

      this.starButtons.forEach((star, index) => {
        const svg = star.querySelector("svg")!;
        if (index < currentRating) {
          svg.classList.remove("text-gray-300", "hover:text-yellow-200");
          svg.classList.add("text-yellow-300");
        } else {
          svg.classList.remove("text-yellow-300");
          svg.classList.add("text-gray-300", "hover:text-yellow-200");
        }
      });
    }

    private validateForm() {
      const hasComment = this.commentText.value.trim().length > 0;
      const hasRating = this.rating > 0;
      this.submitBtn.disabled = !(hasComment && hasRating);
    }

    private async loadUserInfo() {
      // Esperar a que Firebase esté listo
      onAuthStateChanged((user: User | null) => {
        if (user) {
          const displayName = user.displayName || user.email || "Usuario";
          this.avatarName.textContent = displayName;
          const avatarImg = this.modal.querySelector(".avatar-img") as HTMLImageElement;
          const avatarDefault = this.modal.querySelector("#avatar-default") as HTMLElement;
          if (avatarImg && user.photoURL) {
            avatarImg.src = user.photoURL;
            avatarImg.alt = `Avatar de ${displayName}`;
            avatarImg.style.display = "block";
            if (avatarDefault) avatarDefault.style.display = "none";
          } else if (avatarImg) {
            avatarImg.style.display = "none";
            if (avatarDefault) avatarDefault.style.display = "flex";
          }
        } else {
          this.avatarName.textContent = "Usuario no autenticado";
        }
      });
    }

    private async handleSubmit() {
      const comment = this.commentText.value.trim();
      const rating = this.rating;

      if (comment && rating > 0) {
        try {
          const helper = new ApiService();
          if (this.edit) {
            const commentObj: UpdateComment = {
              content: comment,
              stars: rating,
            };
            await helper
              .editComment(this.id, commentObj)
              .then(() => {
                toast.success("Comentario actualizado con éxito.");
                if (this.modal) closeModalAnimation(this.modal);
                setTimeout(() => {
                  window.location.reload();
                }, 1000);
              })
              .catch((_) => {
                toast.error(getErrorToast(FrontendErrorCode.UNKNOWN_ERROR));
              });
          } else {
            const currentUser = getFirebaseAuth().currentUser;
            if (!currentUser) {
              toast.error(getErrorToast(FrontendErrorCode.NEED_AUTHENTICATION));
              return;
            }
            const commentObj: Comment = {
              author_uid: currentUser.uid,
              name: typeof currentUser.displayName === "string" ? currentUser.displayName : "Anonimo",
              content: comment,
              timestamp: new Date().toISOString(),
              url_img: currentUser.photoURL ? currentUser.photoURL : undefined,
              stars: rating,
            };
            await helper
              .postComment(commentObj)
              .then(() => {
                toast.success("Comentario enviado con éxito.");
                if (this.modal) closeModalAnimation(this.modal);
                setTimeout(() => {
                  window.location.reload();
                }, 1000);
              })
              .catch((_) => {
                toast.error(getErrorToast(FrontendErrorCode.UNKNOWN_ERROR));
              });
          }
        } catch (error) {
          toast.error(getErrorToast(FrontendErrorCode.UNKNOWN_ERROR));
        }

        this.resetForm();
      }
    }

    private resetForm() {
      this.commentText.value = "";
      this.rating = 0;
      this.hoverRating = 0;
      this.ratingValue.value = "0";
      this.updateStars();
      this.validateForm();
    }

    public reset() {
      this.resetForm();
    }

    public setEditData(content: string, stars: number) {
      this.commentText.value = content;
      this.rating = stars;
      this.ratingValue.value = stars.toString();
      this.updateStars();
      this.validateForm();
    }
  }

  // Esperamos a que carge en el doom
  document.addEventListener("DOMContentLoaded", () => {
    const commentModals = document.querySelectorAll("dialog[data-comment-modal='true']");
    window.commentModals = window.commentModals || {};
    commentModals.forEach((modal) => {
      const id = modal.id;
      if (id) {
        window.commentModals[id] = new CommentModal(id);
      }
    });
  });

  declare global {
    interface Window {
      commentModals: Record<string, CommentModal>;
    }
  }
</script>
