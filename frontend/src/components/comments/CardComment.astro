---
import type { Comment } from "@/types/bakend-types";
import StarGroup from "./StarGroup.astro";
import Like from "@/assets/like.svg";
import Avatar from "../common/Avatar.astro";
import type { AvatarProps, ModalComent } from "@/types/types";
import CommentModal from "@/components/comments/CommentModal.astro";

const comment = Astro.props.comment as Comment;
const idCommentShared = Astro.props.id as string;
const data = Astro.props.data as ModalComent;

if (!comment) return;

const avatar: AvatarProps = {
  name: comment.name ?? "Invitado",
  url_img: comment.url_img ?? "",
};
---

<div
  data-comment-id={comment.id}
  class="relative bg-lightSalmon w-full rounded-lg scroll-fade-in overflow-hidden flex flex-col h-full"
>
  <div class="comment-config flex flex-col items-end justify-center absolute top-2 right-2 h-5 space-y-0.5 px-1">
    <div class="w-1 h-1 bg-black rounded-full"></div>
    <div class="w-1 h-1 bg-black rounded-full"></div>
    <div class="w-1 h-1 bg-black rounded-full"></div>
  </div>
  <div class="comment-config-menu hidden bg-salmon absolute right-1 top-8 text-xs rounded-md w-fit h-fit">
    <ul>
      <li class="p-1 hover:text-lightRed"><button>Editar</button></li>
      <li class="p-1 hover:text-lightRed"><button>Eliminar</button></li>
    </ul>
  </div>
  <!-- Header compacto -->
  <div class="p-4">
    <div class="flex items-center space-x-3">
      <!-- Avatar pequeño -->
      <Avatar info={avatar} />

      <!-- Info del usuario compacta -->
      <div class="flex-1 min-w-0">
        <div class="flex items-center justify-between">
          <h5 class="text-sm font-medium truncate w-32">
            {comment.name}
          </h5>
          <time class="text-xs mr-2">
            {comment.timestamp}
          </time>
        </div>
        <div class="mt-0.5 flex items-start">
          <StarGroup star={comment.stars} size={"12px"} />
        </div>
      </div>
    </div>

    <!-- Contenido del comentario -->
    <div class="mt-3">
      <p class="text-[var(-text-gray-800)] text-sm leading-snug line-clamp-3">
        {comment.content}
      </p>
    </div>
  </div>

  <!-- Footer minimalista -->
  <div class="px-4 py-1 bg-salmon mt-auto">
    <div class="flex items-center justify-end">
      <!-- Botón de like compacto -->
      <button
        class="flex items-center space-x-1 px-2 py-1 rounded-md hover:bg-[var(--color-light-red)] transition-colors duration-200 like-icon cursor-pointer"
        data-users-liked={JSON.stringify(comment.users_liked ?? [])}
        data-id={comment.id}
      >
        <Like
          class="w-3.5 h-3.5 text-[var(--text-medium-contrast)] hover:text-[var(--color-red)] transition-colors duration-200 like-svg"
        />
        <span class="text-xs font-medium text-[var(--text-medium-contrast)] min-w-3 text-center">
          {(comment.like ?? 0) || 0}
        </span>
      </button>
    </div>
  </div>
</div>
<CommentModal id={idCommentShared} edit={true} data={data} />

<script>
  import { auth } from "@/config/firebase";
  import { ApiService } from "@/services/helper";
  import type { Result, Comment } from "@/types/bakend-types";
  import { showModalAnimation } from "@/utils/modals";
  import toast from "solid-toast";
  import { FrontendErrorCode, getErrorToast } from "@/enums/enums";

  const options = document.querySelectorAll(".comment-config");
  const menus = document.querySelectorAll(".comment-config-menu");
  const helper = new ApiService();

  options.forEach((option, index) => {
    option.addEventListener("click", (e) => {
      e.stopPropagation();
      if (!auth.currentUser) {
        toast.error(getErrorToast(FrontendErrorCode.NEED_AUTHENTICATION));
        return;
      }
      menus[index].classList.toggle("hidden");
    });
  });

  document.addEventListener("click", (e) => {
    menus.forEach((menu) => {
      if (!menu.classList.contains("hidden")) {
        menu.classList.add("hidden");
      }
    });
  });

  const deleteButtons = document.querySelectorAll(".comment-config-menu li:last-child button");
  deleteButtons.forEach((btn, idx) => {
    btn.addEventListener("click", (e) => {
      e.stopPropagation();
      const commentDiv = btn.closest("[data-comment-id]");

      if (!commentDiv) {
        console.error("No se encontró el contenedor del comentario");
        return;
      }

      const commentId: string = commentDiv.getAttribute("data-comment-id") as string;

      if (!commentId) {
        console.error("No se encontró el ID del comentario");
        return;
      }

      helper.deleteComment(commentId).then((res) => {
        if (res.success) {
          menus[idx].classList.add("hidden");
          toast.success("Comentario eliminado");
          // Optimistic UI - eliminamos el comentario del DOM
          commentDiv.remove();
        } else {
          console.error("Error al eliminar el comentario");
          if (res.error.message && res.error.statusCode == 403) {
            toast.error(getErrorToast(FrontendErrorCode.MUST_BE_OWNER));
          } else {
            toast.error(getErrorToast(FrontendErrorCode.UNKNOWN_ERROR));
          }
        }
      });
    });
  });

  const editButtons = document.querySelectorAll(".comment-config-menu li:first-child button");
  editButtons.forEach((btn, idx) => {
    btn.addEventListener("click", async (e) => {
      e.stopPropagation();
      const commentDiv = btn.closest("[data-comment-id]");
      if (!commentDiv) {
        console.error("No se encontró el contenedor del comentario");
        return;
      }
      const commentId: string = commentDiv.getAttribute("data-comment-id") as string;
      if (!commentId) {
        console.error("No se encontró el ID del comentario");
        return;
      }
      const helper = new ApiService();
      const comment: Result<Comment> = await helper.getCommentById(commentId);

      if (!comment.success) {
        toast.error(getErrorToast(FrontendErrorCode.UNKNOWN_ERROR));
        return;
      }

      if (auth.currentUser?.uid !== comment.data.author_uid) {
        toast.error(getErrorToast(FrontendErrorCode.MUST_BE_OWNER));
        return;
      }

      const modal = document.getElementById(commentId) as HTMLDialogElement;
      const form = modal.querySelector("form");
      showModalAnimation(modal, form, true);
    });
  });
</script>
<style>
  .like-svg {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    color: #6b7280;
    fill: #cbcbcb;
  }

  .like-icon.liked .like-svg,
  .like-svg.liked {
    color: var(--color-red);
    fill: var(--color-light-red);
    animation: likeAnimation 0.6s ease-in-out;
  }

  .like-svg:hover {
    color: var(--color-red);
    transform: scale(1.1);
  }

  .like-svg.pulse {
    animation: pulseEffect 0.3s ease-out;
  }

  @keyframes likeAnimation {
    0% {
      transform: scale(1);
    }
    15% {
      transform: scale(1.2);
    }
    30% {
      transform: scale(0.95);
    }
    45% {
      transform: scale(1.1);
    }
    60% {
      transform: scale(0.98);
    }
    100% {
      transform: scale(1);
    }
  }
  @keyframes pulseEffect {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.3);
    }
    100% {
      transform: scale(1);
    }
  }
</style>
